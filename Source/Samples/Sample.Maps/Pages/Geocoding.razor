@page "/Geocoding"

@using System
@using System.Reactive.Threading.Tasks
@using System.Reactive.Linq
@using Proxoft.Extensions.Options
@using Proxoft.Maps.Core.Api;
@using Proxoft.Maps.Core.Geocoding


<h3>Geocoding</h3>

<div>
    <input @bind-value="Search" />
    <button @onclick="async () => await this.OnSearchClick()">Search</button>
</div>

<div>
    @if (this.Result is Left<ErrorStatus, Address> error)
    {
    <span> @((ErrorStatus)error)</span>
    }
    else
    {
    <span>Address</span><br />
    @Address.Street  <br />
    @Address.StreetNumber<br />
    @Address.City  <br />
    @Address.Zip  <br />
    @Address.Country  <br />
    <span>@Address.LatLng.Latitude</span>  <span>@Address.LatLng.Longitude</span>
    }

</div>

<div>
    City: <input @bind-value="City" /> <br />
    Street: <input @bind-value="Street" /> <br />
    Street number: <input @bind-value="StreetNumber" />

    <button @onclick="async () => await this.OnSearchLatLngClick()">Search</button>
    <br />
    Lat: <span>@LatLng.Latitude</span>
    Lng: <span>@LatLng.Longitude</span>
</div>

<div class="map-container" @ref="MapHost"></div>

@code {
    [Inject]
    IGeocoder Geocoder { get; set; }

    [Inject]
    IMapFactory MapFactory { get; set; }

    private ElementReference MapHost { get; set; }

    private IMap _map = Proxoft.Maps.Core.Api.NoMap.Instance;

    private string Search { get; set; } = "Banska Bystrica";

    private string City { get; set; }
    private string Street { get; set; }
    private string StreetNumber { get; set; }
    private LatLng LatLng { get; set; } = new();

    private Either<ErrorStatus, Address> Result { get; set; } = ErrorStatus.ZeroResults;

    private Address Address => (Right<ErrorStatus, Address>)this.Result;

    private bool ShowError { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            _map = await this.MapFactory.Initialize(new MapOptions {
                Center = new LatLng
                {
                    Latitude = 48.569m,
                    Longitude = 18.569m
                },
                Zoom = 9
            }, this.MapHost);

            _map.OnClick()
                .Select(latLng =>
                {
                    return this.Geocoder.Geocode(latLng.Latitude, latLng.Longitude).ToObservable();
                })
                .Concat()
                .Subscribe(result =>
                {
                    this.Result = result;
                    this.StateHasChanged();
                });
        }
    }

    private async Task OnSearchClick()
    {
        this.Result = await this.Geocoder.Geocode(this.Search);

        if(this.Result is Right<ErrorStatus, Address> right)
        {
            var addr = (Address)right;
            _map.FitBounds(LatLngBounds.FromPosition(addr.LatLng));
        }

        this.StateHasChanged();
    }

    private async Task OnSearchLatLngClick()
    {
        var either = await this.Geocoder.Geocode(this.City, street: this.Street, streetNumber: this.StreetNumber);

        this.LatLng = either
            .Map(l => l)
            .Reduce(_ => new LatLng());

        this.StateHasChanged();
    }
}
