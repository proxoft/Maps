@page "/Marker"
@implements IDisposable

@using System.Reactive.Linq;
@using Proxoft.Maps.Core.Api

<div class="map-container" @ref="MapHost">
</div>

<div class="map-event-log">
    @foreach (var l in MapLog)
    {
        <span>@l</span><br />
    }
</div>

<div>
    <button @onclick="PositionClick">Set Position</button>
    <span>Lat:</span><input @bind-value="Lat" />
    <span>Lng:</span><input @bind-value="Lng" />
</div>
<div>
    Draggable <input type="checkbox" @bind-value="Draggable" />
</div>

@code {
    private bool _draggable;

    private IMap _map = Proxoft.Maps.Core.Api.Maps.NoMap.Instance;
    private IMarker _marker = Proxoft.Maps.Core.Api.Markers.NoMarker.Instance;

    [Inject]
    public IMapFactory MapFactory { get; set; }

    ElementReference MapHost { get; set; }

    private List<string> MapLog { get; set; } = new();

    private bool Draggable {
        get => _draggable;
        set
        {
            _draggable = value;
            _marker.SetDraggable(value);
        }
    }

    private decimal Lat { get; set; } = -34.397m;
    private decimal Lng { get; set; } = 150.644m;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            LatLng center = new()
            {
                Latitude = this.Lat,
                Longitude = this.Lng
            };

            _map = await this.MapFactory.Initialize(new MapOptions { Center = center, Zoom = 7 }, this.MapHost);
            _marker = _map.AddMarker(new MarkerOptions() { Position = center, Draggable = false });

            _marker.OnEvent
                .Subscribe(e => this.AddLog(e.Name));
        }
    }

    private void PositionClick()
    {
        _marker.SetPosition(this.Lat, this.Lng);
    }

    private void AddLog(string logMessage)
    {
        this.MapLog.Add(logMessage);
        this.StateHasChanged();
    }

    public void Dispose()
    {
        _marker.Dispose();
        _map.Dispose();
    }
}
