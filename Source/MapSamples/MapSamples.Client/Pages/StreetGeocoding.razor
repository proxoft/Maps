@page "/StreetGeocoding"
@using Proxoft.Maps.Core.Abstractions.Geocoding

<h3>StreetGeocoding</h3>

<div>
    <input @bind="this.SearchExpression"
           @bind:after="this.Search" />

    <button @onclick="@this.Search" disabled="@this.Searching">Search</button>

    @if (this.SearchingForExpression)
    {
        <span>..searching</span>
    }
</div>

<div>
    <input @bind="this.SearchStreet"
           @bind:after="this.SearchByCityAndStreet" />

    <input @bind="this.SearchCity"
           @bind:after="this.SearchByCityAndStreet" />

    <button @onclick="@this.SearchByCityAndStreet" disabled="@this.Searching">Search</button>

    @if (this.SearchingForStreetAndCity)
    {
        <span>..searching</span>
    }
</div>

<div class="default-map-container" @ref="MapHost"></div>

@code {
    private IPolyline[] _lines = [];

    [Inject]
    IGeocoder Geocoder { get; set; } = null!;

    private ElementReference MapHost { get; set; }

    private string SearchExpression { get; set; } = "bystricky rad zvolen";
    private bool SearchingForExpression { get; set; }
    private string SearchStreet { get; set; } = "ruzinovska";
    private string SearchCity { get; set; } = "bratislava";
    private bool SearchingForStreetAndCity { get; set; }

    private bool Searching => this.SearchingForExpression || this.SearchingForStreetAndCity;

    private IMap _map = Proxoft.Maps.Core.Api.NoMap.Instance;

    protected override void OnAfterFirstRender()
    {
        base.OnAfterFirstRender();

        this.MapFactory.Initialize(new MapOptions
            {
                Center = new LatLng
                {
                    Latitude = 48.569m,
                    Longitude = 18.569m
                },
                Zoom = 9
            }, this.MapHost)
        .Do(map => _map = map)
        .Subscribe();
    }

    private async Task Search()
    {
        if (this.Searching)
        {
            return;
        }

        this.SearchingForExpression = true;
        this.StateHasChanged();

        this.ClearLines();

        Either<ErrorStatus, StreetGeometry> either = await this.Geocoder.GeocodeStreet(this.SearchExpression);

        this.SearchingForExpression = false;
        this.StateHasChanged();

        either
            .Do(
                street => this.AddStreetLines(street.Lines),
                e => { }
            );
    }

    private async Task SearchByCityAndStreet()
    {
        if (this.Searching)
        {
            return;
        }

        this.SearchingForStreetAndCity = true;
        this.StateHasChanged();

        this.ClearLines();

        Either<ErrorStatus, StreetGeometry> either = await this.Geocoder.GeocodeStreet(this.SearchCity, this.SearchStreet);

        this.SearchingForStreetAndCity = false;
        this.StateHasChanged();

        either
            .Do(
                street => this.AddStreetLines(street.Lines),
                e => { }
            );
    }

    private void ClearLines()
    {
        foreach (IPolyline l in _lines)
        {
            l.Remove();
        }

        _lines = [];
    }

    private void AddStreetLines(StreetLine[] lines)
    {
        Style lineStyle = new()
        {
            Fill = false
        };

        _lines = [
            ..lines
            .Select(l => PolylineOptions.SingleLine(l.Points, lineStyle))
            .Select(options => _map.AddPolyline(options))
        ];

        LatLngBounds bounds = LatLngBounds.FromPositions([.. lines.SelectMany(l => l.Points)]);
        if(bounds == LatLngBounds.Empty)
        {
            return;
        }
        _map.FitBounds(bounds);
    }
}
